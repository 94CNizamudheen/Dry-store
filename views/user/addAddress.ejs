<%- include('../partials/user/header.ejs') %>
    <style>
        /* Content layout styling */
        .content-main {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            background-color: #f9fafb;
        }

        /* Card and form styling */
        .card-address {
            border-radius: 12px;
            border: none;
            max-width: 600px;
            width: 100%;
        }

        /* Title styling */
        .card-title {
            font-weight: bold;
            color: #333;
            text-align: center;
        }

        /* Input styling */
        .form-control {
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: none;
            transition: border-color 0.2s;
        }

        .form-control:focus {
            border-color: #5a67d8;
            box-shadow: 0px 0px 4px rgba(90, 103, 216, 0.5);
        }

        .form-label {
            font-weight: 500;
            color: #4a5568;
        }

        .btn-primary {
            background-color: #5a67d8;
            border-color: #5a67d8;
            font-weight: bold;
            border-radius: 8px;
            transition: background-color 0.3s, transform 0.2s;
        }

        .btn-primary:hover {
            background-color: #4c51bf;
            transform: translateY(-2px);
        }

        /* Centering and spacing for the main card */
        .content-main {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            background-color: #f9fafb;
        }

        /* Card styling */
        .card {
            border-radius: 12px;
            border: none;
            overflow: hidden;
        }

        /* Form title styling */
        .card-title {
            font-weight: bold;
            color: #333;
            text-align: center;
        }

        /* Input field styling */
        .form-control {
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: none;
            transition: border-color 0.2s;
        }

        /* Input focus effect */
        .form-control:focus {
            border-color: #5a67d8;
            box-shadow: 0px 0px 4px rgba(90, 103, 216, 0.5);
        }

        /* Label styling */
        .form-label {
            font-weight: 500;
            color: #4a5568;
        }

        /* Dropdown styling */
        .form-select {
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .btn-primary {
            background-color: #5a67d8;
            border-color: #5a67d8;
            font-weight: bold;
            border-radius: 8px;
            transition: background-color 0.3s, transform 0.2s;
        }


        .btn-primary:hover {
            background-color: #4c51bf;
            transform: translateY(-2px);
        }


        .text-danger {
            font-size: 0.875rem;
            font-weight: 400;
        }

        .text-danger {
            font-size: 0.875em;
            margin-top: 0.25rem;
        }


        @media (max-width: 576px) {
            .content-main {
                padding: 15px;
            }

            .card {
                width: 100%;
            }
        }
    </style>
    <section class="content-main">
        <div class="card mx-auto card-address">
            <div class="card-body">
                <h4 class="card-title mb-4">Add Address</h4>

                <form id="addressForm" action="/addAddress" method="POST" class="container"
                    onsubmit="return validateForm()">

                    <div class="row">
                        <!-- First Column -->
                        <div class="col-md-6">
                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="addressType" class="form-label">Address Type</label>
                                    <input type="text" id="addressType" name="addressType" class="form-control"
                                        placeholder="e.g., Home, Office" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="name" class="form-label">Full Name</label>
                                    <input type="text" id="name" name="name" class="form-control"
                                        placeholder="Full Name" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="pincode" class="form-label">Pincode</label>
                                    <input type="text" id="pincode" name="pincode" class="form-control"
                                        placeholder="6-digit Pincode" />
                                    <div id="pincode-validation-message" class="text-muted small mt-1"></div>
                                </div>
                            </div>

                            <!-- Towns Selection - Initially Hidden -->
                            <div id="townsContainer" class="row mb-3" style="display: none;">
                                <div class="col-12">
                                    <label for="towns" class="form-label">Select City</label>
                                    <select id="towns" name="towns[]" class="form-select" multiple required>
                                        <!-- Options will be dynamically populated -->
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Second Column -->
                        <div class="col-md-6">
                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="landmark" class="form-label">Landmark</label>
                                    <input type="text" id="landmark" name="landmark" class="form-control"
                                        placeholder="Landmark" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="city" class="form-label">City</label>
                                    <input type="text" id="city" name="city" class="form-control" placeholder="City" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="state" class="form-label">State</label>
                                    <input type="text" id="state" name="state" class="form-control"
                                        placeholder="State" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="phone" class="form-label">Phone</label>
                                    <input type="tel" id="phone" name="phone" class="form-control"
                                        placeholder="Phone Number" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12">
                                    <label for="altPhone" class="form-label">Alternative Phone</label>
                                    <input type="tel" id="altPhone" name="altPhone" class="form-control"
                                        placeholder="Alternative Phone" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="row">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary w-100">
                                Add Address
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const pincodeInput = document.getElementById('pincode');
            const townsContainer = document.getElementById('townsContainer');
            const townsDropdown = document.getElementById('towns');
            const cityInput = document.getElementById('city');
            const stateInput = document.getElementById('state');
            const validationMessage = document.getElementById('pincode-validation-message');

            // Cache to store pincode results
            const pincodeCache = new Map();

            // Debounce function
            function debounce(func, delay) {
                let timeoutId;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => {
                        func.apply(context, args);
                    }, delay);
                };
            }

            // Fetch pincode details
            const fetchPincodeDetails = debounce(async function () {
                const pincode = pincodeInput.value.trim();

                // Reset UI
                townsContainer.style.display = 'none';
                validationMessage.textContent = '';
                pincodeInput.classList.remove('is-valid', 'is-invalid');
                townsDropdown.innerHTML = '';
                cityInput.value = '';
                stateInput.value = '';

                // Validate pincode
                if (!/^\d{6}$/.test(pincode)) {
                    validationMessage.textContent = 'Please enter a valid 6-digit pincode';
                    pincodeInput.classList.add('is-invalid');
                    return;
                }

                // Check cache first
                if (pincodeCache.has(pincode)) {
                    updateTownsAndLocation(pincodeCache.get(pincode));
                    return;
                }

                try {
                    // Show loading state
                    validationMessage.textContent = 'Fetching location details...';
                    validationMessage.classList.add('text-primary');

                    const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
                    const data = await response.json();

                    if (data[0].Status === "Success" && data[0].PostOffice.length > 0) {
                        // Cache the result
                        pincodeCache.set(pincode, data[0]);
                        updateTownsAndLocation(data[0]);

                        // Success validation
                        validationMessage.textContent = 'Pincode verified successfully';
                        validationMessage.classList.remove('text-primary', 'text-danger');
                        validationMessage.classList.add('text-success');
                        pincodeInput.classList.add('is-valid');
                    } else {
                        throw new Error('No data found');
                    }
                } catch (error) {
                    console.error('Error fetching town details:', error);
                    validationMessage.textContent = 'Invalid Pincode. Please check and try again.';
                    validationMessage.classList.remove('text-primary', 'text-success');
                    validationMessage.classList.add('text-danger');
                    pincodeInput.classList.add('is-invalid');
                }
            }, 500);

            // Update towns dropdown and location details
            function updateTownsAndLocation(pincodeData) {
                // Populate towns dropdown
                const uniqueTowns = [...new Set(pincodeData.PostOffice.map(po => po.Name))];
                uniqueTowns.forEach(town => {
                    const option = document.createElement('option');
                    option.value = town;
                    option.textContent = town;
                    townsDropdown.appendChild(option);
                });

                // Show towns container
                townsContainer.style.display = 'block';

                // Set state (assuming all post offices in the same pincode are in the same state)
                stateInput.value = pincodeData.PostOffice[0].State;
            }

            // Event listeners
            pincodeInput.addEventListener('blur', fetchPincodeDetails);

            townsDropdown.addEventListener('change', function () {
                const selectedTowns = Array.from(this.selectedOptions).map(option => option.value);
                cityInput.value = selectedTowns.join(', ');
            });
        });
    </script>


<script>
    document.getElementById('addressForm').addEventListener('submit', function (event) {
        if (!validateForm()) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    function validateForm() {
        let isValid = true;

        // Validation Patterns
        const namePattern = /^[A-Za-z\s]+$/;
        const pincodePattern = /^\d{6}$/;
        const phonePattern = /^\d{10}$/;

        // All fields are required now
        const requiredFields = [
            { id: "addressType", pattern: /.+/, error: "Address Type is required." },
            { id: "name", pattern: namePattern, error: "Name should contain alphabets only." },
            { id: "pincode", pattern: pincodePattern, error: "Pincode should be a 6-digit number." },
            { id: "city", pattern: namePattern, error: "City should contain alphabets only." },
            { id: "state", pattern: namePattern, error: "State should contain alphabets only." },
            { id: "phone", pattern: phonePattern, error: "Phone number should be a 10-digit number." },
            { id: "landmark", pattern: /.+/, error: "Landmark is required." },
            { id: "altPhone", pattern: phonePattern, error: "Alternate phone number should be a 10-digit number." },
        ];

        requiredFields.forEach(field => {
            const input = document.getElementById(field.id);
            const errorElementId = `${field.id}-error`;
            let errorElement = document.getElementById(errorElementId);

            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.id = errorElementId;
                errorElement.className = "text-danger small mt-1";
                input.parentNode.appendChild(errorElement);
            }

            if (!input.value.trim()) {
                errorElement.textContent = `${field.error}`;
                isValid = false;
            } else if (!field.pattern.test(input.value.trim())) {
                errorElement.textContent = field.error;
                isValid = false;
            } else {
                errorElement.textContent = ''; // Clear error if valid
            }
        });

        // Phone and Alternate Phone Check
        const phone = document.getElementById('phone').value.trim();
        const altPhone = document.getElementById('altPhone').value.trim();
        const altPhoneError = document.getElementById('altPhone-error');

        if (phone === altPhone) {
            altPhoneError.textContent = 'Phone number and alternate phone number should be different.';
            isValid = false;
        } else if (altPhoneError) {
            altPhoneError.textContent = ''; // Clear error if valid
        }

        return isValid;
    }
</script>
