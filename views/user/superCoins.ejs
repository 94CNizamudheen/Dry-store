<%- include('../partials/user/header.ejs') %>
    <style>
        html {
            overflow-x: hidden;
        }

        body {
            background-color: #ffe2f2;
            font-family: 'Arial', sans-serif;
            overflow: hidden;
        }

        .btn-reward {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            transition: transform 0.3s ease;
        }

        .btn-reward:hover {
            transform: scale(1.05);
        }

        #wheel-canvas {
            max-width: 100%;
            display: block;
            margin: 0 auto;
        }

        .scratch-card-container {
            position: relative;
            width: 300px;
            height: 200px;
            background-color: #e0e0e0;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 15px;
            overflow: hidden;
        }

        #scratchCanvas {
            position: absolute;
            top: 0;
            left: 0;
            cursor: pointer;
        }

        .coin-card {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .coin-card:hover {
            transform: scale(1.03);
        }

        .coin-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            color: rgba(255, 255, 255, 0.8);
        }

        .reward-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: -1;
            /* Hidden by default */
            transition: z-index 0.3s ease-in-out;
        }

        .spin-container {
            position: relative;
            max-width: 400px;
            margin: 0 auto;
        }

        .spin-arrow {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 0;
            height: 0;
            border-left: 20px solid transparent;
            border-right: 20px solid transparent;
            border-top: 50px solid #ff4500;
            z-index: 10;
        }
    </style>
    </head>

    <body>



        <div class="container p-1">
            <div class="container-fluid p-5">
                <div class="coin-card p-4 text-center">
                    <i class="fas fa-coins coin-icon"></i>
                    <h2 class="mb-3 text-white">Super Coin</h2>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Coin balance</span>
                        <strong>Wallet balance</strong>
                    </div>
                   
                    <div class="d-flex justify-content-between">
                        <span id="remainRewardPoints" class="text-white">
                            <%= user.rewardPoints %>
                        </span>
                        <span id="remainWalletBalance">
                            â‚¹ <%= user.wallet.balance.toFixed(2) %>
                        </span>
                    </div>
                </div>
            </div>

            <div class="">
                <div class="row">
                    <div class="col-12 text-center mb-4">
                        <h1>Scrach & Win</h1>

                        <!-- Reward Modes -->
                        <div class="d-flex justify-content-center gap-3 mb-4">
                            <button class="btn btn-reward" data-bs-toggle="modal" data-bs-target="#scratchModal">
                                <i class="fas fa-scratch-card"></i>(250 Coin)
                            </button>
                           
                        </div>
                    </div>
                </div>
            </div>



            <div class="modal fade" id="scratchModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Scratch Card</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center">
                            <div class="scratch-card-container mx-auto mb-3">
                                <div class="reward-overlay">
                                    <div>
                                        <h3 id="rewardAmount"></h3>
                                        <p></p>
                                    </div>
                                </div>
                                <canvas id="scratchCanvas" width="300" height="200"></canvas>
                            </div>
                            <div class="scratch-progress">
                                Scratch to reveal your reward!
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Spin Wheel Modal -->
            <div class="modal fade" id="spinModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Spin Wheel</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center">
                            <div class="spin-container mb-3">
                                <canvas id="wheel-canvas" width="400" height="400"></canvas>
                                <div class="spin-arrow"></div>
                            </div>
                            <div class="spin-controls">
                                <button id="spinButton" class="btn btn-primary">
                                    Spin (10 Coins)
                                </button>
                                <div id="spinResult" class="mt-3"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Bootstrap 5.3 JS Bundle (includes Popper) -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Configuration constants
                const CONFIG = {
                    SCRATCH_RADIUS: 20,
                    SCRATCH_THRESHOLD_PERCENTAGE: 60,
                    COIN_COST: 250,
                    CANVAS_OVERLAY_COLOR: 'silver'
                };

                // UI Element Selectors
                const UI = {
                    scratchCanvas: document.getElementById('scratchCanvas'),
                    rewardOverlay: document.querySelector('.reward-overlay'),
                    rewardAmount: document.getElementById('rewardAmount'),
                    scratchProgress: document.querySelector('.scratch-progress'),
                    scratchModal: document.getElementById('scratchModal')
                };

                // Scratch Card Class
                class ScratchCard {
                    constructor() {
                        this.ctx = UI.scratchCanvas.getContext('2d');
                        this.isScratching = false;
                        this.scratchedArea = 0;
                        this.totalArea = UI.scratchCanvas.width * UI.scratchCanvas.height;
                        this.currentReward = null;
                    }

                    /**
                     * Show confirmation dialog before scratching
                     * @returns {Promise<boolean>} Confirmation result
                     */
                    async confirmScratch() {
                        try {
                            const result = await Swal.fire({
                                icon: 'warning',
                                title: 'Confirm Scratch',
                                text: `Do you want to spend ${CONFIG.COIN_COST} coins to scratch this card?`,
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, Scratch!',
                                background: 'purple',
                                color:"gold",
                                toast:true,
                                position:"center",
                            });

                            return result.isConfirmed;
                        } catch (error) {
                            console.error('Confirmation dialog error:', error);
                            return false;
                        }
                    }

                    /**
                     * Fetch reward from server
                     * @returns {Promise<Object|null>} Reward data or null
                     */
                    async fetchReward() {
                        try {
                            const response = await fetch('/scrachReward', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const data = await response.json();

                            if (!data.success) {
                                this.showErrorMessage(data.message || 'Something went wrong!');
                                return null;
                            }
                            document.querySelector('.header-action-icon-2:nth-child(1) h6').textContent = data.remainRewardPoints;
                            document.querySelector('.header-action-icon-2:nth-child(2) h6').textContent = `â‚¹ ${data.remainWalletBalance.toFixed(2)}`;
                            document.getElementById('remainRewardPoints').textContent = data.remainRewardPoints;
                            document.getElementById('remainWalletBalance').textContent = `â‚¹ ${data.remainWalletBalance.toFixed(2)}`
                            return data.reward;
                        } catch (error) {
                            console.error('Error fetching reward:', error);
                            this.showNetworkErrorMessage();
                            return null;
                        }
                    }

                    /**
                     * Reset scratch card to initial state
                     */
                    resetScratchCard() {
                        // Create silver overlay
                        this.ctx.fillStyle = CONFIG.CANVAS_OVERLAY_COLOR;
                        this.ctx.fillRect(0, 0, UI.scratchCanvas.width, UI.scratchCanvas.height);

                        // Reset state variables
                        this.scratchedArea = 0;
                        this.isScratching = false;

                        // Reset UI elements
                        UI.scratchProgress.textContent = 'Scratch to reveal your reward!';
                        UI.rewardOverlay.style.zIndex = -1;
                        this.currentReward = null;
                    }

                    /**
                     * Handle scratch interaction
                     * @param {MouseEvent} e - Mouse event
                     */
                    scratch(e) {
                        if (!this.isScratching) return;

                        const rect = UI.scratchCanvas.getBoundingClientRect();
                        const x = e.clientX - rect.left;
                        const y = e.clientY - rect.top;

                        // Scratch and clear
                        this.ctx.globalCompositeOperation = 'destination-out';
                        this.ctx.beginPath();
                        this.ctx.arc(x, y, CONFIG.SCRATCH_RADIUS, 0, Math.PI * 2);
                        this.ctx.fill();

                        // Update scratched area
                        this.scratchedArea += Math.PI * CONFIG.SCRATCH_RADIUS * CONFIG.SCRATCH_RADIUS;
                        const scratchPercentage = (this.scratchedArea / this.totalArea) * 100;

                        // Update scratch progress
                        UI.scratchProgress.textContent = `Scratched: ${Math.min(100, scratchPercentage).toFixed(0)}%`;

                        // Check if scratch threshold is reached
                        if (scratchPercentage >= CONFIG.SCRATCH_THRESHOLD_PERCENTAGE) {
                            this.revealReward();
                        }
                    }

                    /**
                     * Reveal the reward on the scratch card
                     */
                    revealReward() {
                        if (!this.currentReward) return;

                        // Fill with white background
                        this.ctx.globalCompositeOperation = 'source-over';
                        this.ctx.fillStyle = 'white';
                        this.ctx.fillRect(0, 0, UI.scratchCanvas.width, UI.scratchCanvas.height);

                        // Set text properties
                        this.ctx.font = '24px Arial';
                        this.ctx.fillStyle = 'green';
                        this.ctx.textAlign = 'center';
                        this.ctx.textBaseline = 'middle';

                        // Draw reward text
                        this.ctx.fillText(
                            `You Won ${this.currentReward.amount} Rupees!`,
                            UI.scratchCanvas.width / 2,
                            UI.scratchCanvas.height / 2
                        );

                        // Update UI
                        UI.rewardOverlay.style.zIndex = 1;
                        UI.scratchProgress.textContent = 'Reward Revealed!';
                        this.isScratching = false;
                    }

                    /**
                     * Show error message using SweetAlert
                     * @param {string} message - Error message to display
                     */
                    showErrorMessage(message) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: message,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK',
                            background: 'purple',
                            color:"gold",
                            toast:true,

                        });
                    }

                    /**
                     * Show network error message
                     */
                    showNetworkErrorMessage() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Network Error',
                            text: 'Unable to fetch reward. Please try again later.',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK',
                            background: 'purple',
                            color:"gold",
                            toast:true,
                        });
                    }

                    /**
                     * Initialize event listeners for scratch interaction
                     */
                    initializeEventListeners() {
                        const boundScratch = this.scratch.bind(this);

                        UI.scratchCanvas.addEventListener('mousedown', (e) => {
                            this.isScratching = true;
                            boundScratch(e);
                        });

                        UI.scratchCanvas.addEventListener('mousemove', boundScratch);
                        UI.scratchCanvas.addEventListener('mouseup', () => { this.isScratching = false; });
                        UI.scratchCanvas.addEventListener('mouseleave', () => { this.isScratching = false; });
                    }

                    /**
                     * Main method to handle scratch card interaction
                     */
                    async start() {
                        // Reset card state
                        this.resetScratchCard();

                        // Confirm scratch
                        const confirmed = await this.confirmScratch();
                        if (!confirmed) return;

                        // Fetch reward
                        this.currentReward = await this.fetchReward();
                        if (!this.currentReward) return;

                        // Update reward UI
                        // UI.rewardAmount.textContent = `${this.currentReward.amount} Rupees`;
                        UI.rewardOverlay.querySelector('p').textContent = this.currentReward.message;

                        // Initialize scratch interactions
                        this.initializeEventListeners();
                    }
                }

                // Initialize scratch card when modal is shown
                const scratchCard = new ScratchCard();
                UI.scratchModal.addEventListener('show.bs.modal', () => {
                    scratchCard.start();
                });
            });
        </script>
    </body>
    <%- include('../partials/user/footer.ejs') %>
