<%- include('../partials/user/header.ejs') %>
    <style>
        .card.border-success {
            border: 2px solid green;
            background-color: #f7fdf7;

        }

        .card {
            box-shadow: 5px 5px 10px #ccc, -5px -5px 10px #fff;
            padding: 10px;
        }

        .card-title {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .btn-outline-success {
            padding: 5px 20px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .btn-outline-success:hover {
            background-color: #28a745;
            color: white;
        }
    </style>
 
    <main class="main">
        <div class="page-header breadcrumb-wrap">
            <div class="container">
                <div class="breadcrumb">
                    <a href="index.html" rel="nofollow">Home</a>
                    <span></span> Shop <span></span> Checkout
                </div>
            </div>
        </div>
        
        <section class="mt-50 mb-50">
            <% if(isEmpty) {%>
                <div class="text-center my-5">
                    <h2>Your Cart is Empty</h2>
                    <p>Looks like you haven't added any items to your cart yet.</p>
                    <a href="/shop" class="btn btn-primary">Continue Shopping</a>
                </div>
                <% }else {%>
                    <div class="container">

                        <div class="row">
                            <div class="col-12">
                                <div class="divider mt-50 mb-50"></div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-25">
                                    <h4>Choose Address</h4>
                                </div>
                                <section class="content-main">
                                    <div class="container">
                                        <!-- Display User Addresses -->
                                        <div class="row mb-4">
                                            <% if (userAddress && userAddress.address.length> 0) { %>
                                                <% userAddress.address.forEach((address)=> { %>
                                                    <div class="col-lg-6 mb-3">
                                                        <div class="card <%= selectedAddress && selectedAddress.toString() === address._id.toString() ? 'border-success' : '' %>"
                                                            id="address-<%= address._id %>">
                                                            <div class="card-header">
                                                                <h5 class="mb-0">
                                                                    Address Type: <%= address.addressType %>
                                                                </h5>
                                                            </div>
                                                            <div class="card-body">
                                                                <address>
                                                                    Name: <%= address.name %><br />
                                                                        City: <%= address.city %><br />
                                                                            Landmark: <%= address.landmark %><br />
                                                                                State: <%= address.state %><br />
                                                                                    Pincode: <%= address.pincode %>
                                                                                        <br />
                                                                                        Phone: <%= address.phone %>
                                                                                            <br />
                                                                                            Alternative Phone: <%=
                                                                                                address.altPhone %>
                                                                </address>
                                                                <a href="/edit-address/?id=<%= address._id %>"
                                                                    class="btn btn-primary btn-sm">Edit</a>
                                                                <a href="#" class="btn btn-secondary btn-sm select-btn"
                                                                    data-id="<%= address._id %>">Select</a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <% }) %>
                                                        <% } else { %>
                                                            <div class="col-lg-6">
                                                                <div class="card">
                                                                    <div class="card-header">
                                                                        <h5 class="mb-0">No Address</h5>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <% } %>
                                        </div>


                                        <!-- Address Form -->
                                        <div class="form-group">
                                            <div class="chek-form">
                                                <div class="custome-checkbox">
                                                    <input class="form-check-input" type="checkbox" name="checkbox"
                                                        id="differentaddress" />
                                                    <label class="form-check-label label_info" data-bs-toggle="collapse"
                                                        data-target="#collapseAddress" href="#collapseAddress"
                                                        aria-controls="collapseAddress"
                                                        for="differentaddress"><span>Ship to a different
                                                            address?</span></label>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="collapseAddress" class="different_address collapse in">
                                            <div class="card mx-auto card-address">
                                                <div class="card-body">
                                                    <h4 class="card-title mb-4">Add Address</h4>
                                                    <form id="addressForm" action="/check-out-add-address" method="POST"
                                                        class="container">
                                                        <div class="row">
                                                            <!-- First Column -->
                                                            <div class="col-md-6">
                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="addressType"
                                                                            class="form-label">Address Type</label>
                                                                        <input type="text" id="addressType"
                                                                            name="addressType" class="form-control"
                                                                            placeholder="e.g., Home, Office" required />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="name" class="form-label">Full
                                                                            Name</label>
                                                                        <input type="text" id="name" name="name"
                                                                            class="form-control" placeholder="Full Name"
                                                                            required />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="pincode"
                                                                            class="form-label">Pincode</label>
                                                                        <input type="text" id="pincode" name="pincode"
                                                                            class="form-control"
                                                                            placeholder="6-digit Pincode" required />
                                                                        <div id="pincode-validation-message"
                                                                            class="text-muted small mt-1"></div>
                                                                    </div>
                                                                </div>

                                                                <!-- Towns Selection - Initially Hidden -->
                                                                <div id="townsContainer" class="row mb-3"
                                                                    style="display: none;">
                                                                    <div class="col-12">
                                                                        <label for="towns" class="form-label">Select
                                                                            City</label>
                                                                        <select id="towns" name="towns[]"
                                                                            class="form-select" multiple required>
                                                                            <!-- Options will be dynamically populated -->
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <!-- Second Column -->
                                                            <div class="col-md-6">
                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="landmark"
                                                                            class="form-label">Landmark</label>
                                                                        <input type="text" id="landmark" name="landmark"
                                                                            class="form-control"
                                                                            placeholder="Landmark" />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="city"
                                                                            class="form-label">City</label>
                                                                        <input type="text" id="city" name="city"
                                                                            class="form-control" placeholder="City"
                                                                            required readonly />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="state"
                                                                            class="form-label">State</label>
                                                                        <input type="text" id="state" name="state"
                                                                            class="form-control" placeholder="State"
                                                                            required readonly />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="phone"
                                                                            class="form-label">Phone</label>
                                                                        <input type="tel" id="phone" name="phone"
                                                                            class="form-control"
                                                                            placeholder="Phone Number" required
                                                                            pattern="[0-9]{10}" />
                                                                    </div>
                                                                </div>

                                                                <div class="row mb-3">
                                                                    <div class="col-12">
                                                                        <label for="altPhone"
                                                                            class="form-label">Alternative Phone</label>
                                                                        <input type="tel" id="altPhone" name="altPhone"
                                                                            class="form-control"
                                                                            placeholder="Alternative Phone"
                                                                            pattern="[0-9]{10}" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <!-- Submit Button -->
                                                        <div class="row">
                                                            <div class="col-12">
                                                                <button type="submit" class="btn btn-primary w-100">
                                                                    Add Address
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </form>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="">
                                            <div class="toggle_info">
                                                <span><i class="fi-rs-label mr-10"></i><span class="text-muted">Have a
                                                        coupon?</span>
                                                    <a href="#coupon" data-bs-toggle="collapse" class="collapsed"
                                                        aria-expanded="false">Click here to enter your code</a></span>
                                            </div>
                                            <div class="panel-collapse collapse coupon_form" id="coupon">
                                                <div class="panel-body">

                                                    <div class="input-group">
                                                        <input type="text" id="couponInput" class="form-control"
                                                            style="border-color: black;" placeholder="Enter coupon code"
                                                            aria-label="Coupon code">
                                                        <button id="applyBtn"
                                                            class="btn btn-primary <%= discount > 0 ? 'd-none' : '' %>">
                                                            Apply Coupon
                                                        </button>
                                                        <button id="removeBtn"
                                                            class="btn btn-danger <%= discount > 0 ? '' : 'd-none' %>">
                                                            Remove Coupon
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="container mt-4">
                                            <div class="row ">
                                                <% if(coupons.length<=0) {%>
                                                    <h3 class="text-danger">No active coupons</h3>
                                                    <% }else{ %>
                                                        <div class="col-sm-12">
                                                            <h3 class="mb-3 text-success">Active Coupons</h3>
                                                        </div>
                                                        <% coupons.forEach((coupon, index)=> { %>
                                                            <div class="col-md-5 mb-3">
                                                                <div
                                                                    class="card <%= (new Date(coupon.expiryOn) < new Date() || coupon.usageLimit - coupon.timesUsed <= 0) 
                                                            ? 'border-danger bg-danger text-white opacity-17' 
                                                            : (index % 2 === 0 ? 'border-success bg-light' : 'border-warning bg-light') %>">
                                                                    <div
                                                                        class="card-header bg-<%= (new Date(coupon.expiryOn) < new Date() || coupon.usageLimit - coupon.timesUsed <= 0) 
                                                                ? 'danger' 
                                                                : (index % 2 === 0 ? 'success' : 'warning') %> text-white">
                                                                        <h5>
                                                                            <% if (coupon.minimumPrice) { %>
                                                                                Minimum Purchase: ₹<%=
                                                                                    coupon.minimumPrice %>
                                                                                    <% } %>
                                                                        </h5>
                                                                    </div>
                                                                    <div class="card-body">
                                                                        <p class="card-text">
                                                                            <span class="badge bg-info">
                                                                                <%= coupon.discountType==='percentage' ?
                                                                                    coupon.discountValue + '% OFF' : '₹'
                                                                                    + coupon.discountValue + ' OFF' %>
                                                                            </span>
                                                                        </p>
                                                                        <ul class="list-unstyled">
                                                                            <li><strong>Code:</strong><br>
                                                                                <%= coupon.code %>
                                                                            </li>
                                                                            <li><strong>Expires:</strong>
                                                                                <%= new
                                                                                    Date(coupon.expiryOn).toLocaleDateString()
                                                                                    %>
                                                                            </li>
                                                                            <li><strong>Usage Limit:</strong>
                                                                                <%= coupon.usageLimit - coupon.timesUsed
                                                                                    %> Left
                                                                            </li>
                                                                        </ul>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <% }) %>


                                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </section>



                                <div id="loadingSpinner" class="d-none text-center mt-2">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div><br>
                            </div>
                            <div class="col-md-6">
                                <div class="order_review">
                                    <div class="mb-20">
                                        <h4>Your Orders</h4>
                                    </div>
                                    <div class="table-responsive order_table text-center">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th colspan="2">Product</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% cart.items.forEach(item=> { %>
                                                    <tr>
                                                        <td class="image product-thumbnail">
                                                            <img src="/uploads/images/<%= item.productId.productImage[0] %>"
                                                                alt="#" />
                                                        </td>
                                                        <td>
                                                            <h5>
                                                                <a href="shop-product-full.html">
                                                                    <%= item.productId.productName %>
                                                                </a>
                                                            </h5>
                                                            <span class="product-qty">Quantity: <%= item.quantity %>
                                                                    </span>
                                                        </td>
                                                        <td>₹<%= item.totalPrice.toFixed(2) %>
                                                        </td>
                                                    </tr>
                                                    <% }) %>

                                                        <tr>
                                                            <th class="fw-bold">Total</th>
                                                            <td colspan="2" class="product-subtotal">
                                                                ₹<span id="subtotal">
                                                                    <%= regularTotal.toFixed(2) %>
                                                                </span>
                                                            </td>
                                                        </tr>

                                                        <tr>
                                                            <th class="fw-bold">Discount</th>
                                                            <td colspan="2" class="product-subtotal text-success">
                                                                - ₹<%= totalDiscount.toFixed(2) %>
                                                            </td>
                                                        </tr>

                                                        <tr>
                                                            <th class="fw-bold">Shipping</th>
                                                            <td colspan="2" class="price text-center">
                                                                <span id="shipping-cost" class="fw-bold">₹<%=
                                                                        shipping.toFixed(2) %></span>
                                                            </td>
                                                        </tr>

                                                        <tr>
                                                            <th class="fw-bold">Applied Discount</th>
                                                            <td colspan="2">
                                                                <input type="hidden" id="discount"
                                                                    value="<%= discount.toFixed(2) %>">
                                                                <span id="totalAmount"
                                                                    class="font-xl text-brand fw-900">₹<%=
                                                                        discount.toFixed(2) %></span>
                                                            </td>
                                                        </tr>

                                                        <tr>
                                                            <th class="fw-bold ">Final Amount</th>
                                                            <td colspan="2" class="product-subtotal">
                                                                <% if (discount===0) { %>
                                                                    <input type="hidden" id="total"
                                                                        value="<%= total.toFixed(2) %>">
                                                                    <span id="totalAmount"
                                                                        class="font-xl text-brand fw-900 text-success">₹
                                                                        <%= total.toFixed(2) %></span>
                                                                    <% } else { %>
                                                                        <input type="hidden" id="total"
                                                                            value="<%= discountedTotal.toFixed(2) %>">
                                                                        <span id="totalAmount"
                                                                            class="font-xl text-brand fw-900 text-success">₹
                                                                            <%= discountedTotal.toFixed(2) %></span>
                                                                        <% } %>
                                                            </td>
                                                        </tr>
                                            </tbody>


                                        </table>

                                    </div>
                                    <div class="container mt-4 d-flex justify-content-start">
                                        <div class="card text-center shadow-sm p-3"
                                            style="border-radius: 15px; max-width: 300px; background: #f8f9fa;">
                                            <div class="card-header bg-secondary text-white"
                                                style="border-radius: 15px 15px 0 0;">
                                                <h5>Wallet Balance</h5>
                                            </div>
                                            <div class="card-body">
                                                <h6 class="card-title" style="font-size: 1.5rem; color: #650a5c;">₹
                                                    <span id="walletBalance">
                                                        <%= walletBalance.toFixed(2) %>
                                                    </span>
                                                </h6>
                                                <a href="/wallet" class="btn btn-sm btn-outline-success"
                                                    style="border-radius: 20px;">Add Funds</a>

                                            </div>
                                        </div>
                                    </div>


                                    <div class="bt-1 border-color-1 mt-30 mb-30"></div>
                                    <form id="paymentMethodForm">
                                        <div class="payment_method">
                                            <div class="mb-25">
                                                <h5>Payment</h5>
                                            </div>
                                            <div class="paymentOption">
                                                <div class="custome-radio">
                                                    <input class="form-check-input" type="radio" name="paymentOption"
                                                        id="walletOption" value="WALLET" />
                                                    <label class="form-check-label" for="walletOption">
                                                        Wallet payment
                                                    </label>
                                                </div>
                                                <div class="custome-radio">
                                                    <input class="form-check-input" type="radio" name="paymentOption"
                                                        id="codOption" value="COD" />
                                                    <label class="form-check-label" for="codOption">
                                                        Cash On Delivery
                                                    </label>
                                                </div>
                                                <div class="custome-radio">
                                                    <input class="form-check-input" type="radio" name="paymentOption"
                                                        id="onlineOption" value="ONLINE" />
                                                    <label class="form-check-label" for="onlineOption">
                                                        Online Payments
                                                    </label>
                                                </div>
                                            </div>
                                            <button id="placeOrderButton" type="button"
                                                class="btn btn-fill-out btn-block mt-30" style="display: none;">
                                                Place Order
                                            </button>
                                        </div>
                                    </form>

                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Bootstrap Modal -->

                    <div class="modal fade" id="paymentRetryModal" tabindex="-1" aria-labelledby="retryModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content">
                                <div class="modal-header bg-warning text-white">
                                    <h5 class="modal-title" id="retryModalLabel">
                                        "Payment unsuccessful. Please try placing your order again."
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="container-fluid">
                                            <h5 class="mb-3">Order Summary</h5>
                                            <div class="table-responsive order_table text-center">
                                                <table class="table table-bordered">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th colspan="2">Product</th>
                                                            <th>Total</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% cart.items.forEach(item=> { %>
                                                            <tr>
                                                                <td class="image product-thumbnail">
                                                                    <img src="/uploads/images/<%= item.productId.productImage[0] %>"
                                                                        alt="#" style="width: 80px; height: auto;" />
                                                                </td>
                                                                <td>
                                                                    <h6 class="mb-1">
                                                                        <%= item.productId.productName %>
                                                                    </h6>
                                                                    <small class="text-muted">Quantity: <%=
                                                                            item.quantity %></small>
                                                                </td>
                                                                <td>₹<%= item.totalPrice.toFixed(2) %>
                                                                </td>
                                                            </tr>
                                                            <% }) %>
                                                                <tr>
                                                                    <th colspan="2">Total</th>
                                                                    <td>₹<%= regularTotal.toFixed(2) %>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <th colspan="2">Discount</th>
                                                                    <td class="text-success">- ₹<%=
                                                                            totalDiscount.toFixed(2) %>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <th>Applied Discount</th>
                                                                    <td colspan="2">
                                                                        <input type="hidden"
                                                                            value="<%=discount.toFixed(2) %>">
                                                                        <span id="totalAmount"
                                                                            class="font-xl text-brand fw-900">₹<%=
                                                                                discount.toFixed(2) %>
                                                                        </span>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <th colspan="2">Shipping</th>
                                                                    <td>
                                                                        <% if (discountedTotal> 1000) { %>
                                                                            <em>
                                                                                <del>₹<%= shipping.toFixed(2) %></del>
                                                                                Free
                                                                            </em>
                                                                            <% } else { %>
                                                                                <em>₹<%= shipping.toFixed(2) %></em>
                                                                                <% } %>
                                                                    </td>
                                                                </tr>

                                                                <tr>
                                                                    <th colspan="2" class="fw-bold">Final Total</th>
                                                                    <td class="fw-bold text-success">
                                                                        ₹<%= (discount===0 ? total.toFixed(2) :
                                                                            discountedTotal.toFixed(2)) %>
                                                                    </td>
                                                                </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <button type="button " class="btn btn-primary w-100 mt-4 btn-sm"
                                                id="retryPaymentBtn">
                                                Retry Payment
                                            </button>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <% } %>
        </section>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const pincodeInput = document.getElementById('pincode');
            const townsContainer = document.getElementById('townsContainer');
            const townsDropdown = document.getElementById('towns');
            const cityInput = document.getElementById('city');
            const stateInput = document.getElementById('state');
            const validationMessage = document.getElementById('pincode-validation-message');

            // Cache to store pincode results
            const pincodeCache = new Map();

            // Debounce function
            function debounce(func, delay) {
                let timeoutId;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => {
                        func.apply(context, args);
                    }, delay);
                };
            }

            // Fetch pincode details
            const fetchPincodeDetails = debounce(async function () {
                const pincode = pincodeInput.value.trim();

                // Reset UI
                townsContainer.style.display = 'none';
                validationMessage.textContent = '';
                pincodeInput.classList.remove('is-valid', 'is-invalid');
                townsDropdown.innerHTML = '';
                cityInput.value = '';
                stateInput.value = '';

                // Validate pincode
                if (!/^\d{6}$/.test(pincode)) {
                    validationMessage.textContent = 'Please enter a valid 6-digit pincode';
                    pincodeInput.classList.add('is-invalid');
                    return;
                }

                // Check cache first
                if (pincodeCache.has(pincode)) {
                    updateTownsAndLocation(pincodeCache.get(pincode));
                    return;
                }

                try {
                    // Show loading state
                    validationMessage.textContent = 'Fetching location details...';
                    validationMessage.classList.add('text-primary');

                    const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
                    const data = await response.json();

                    if (data[0].Status === "Success" && data[0].PostOffice.length > 0) {
                        // Cache the result
                        pincodeCache.set(pincode, data[0]);
                        updateTownsAndLocation(data[0]);

                        // Success validation
                        validationMessage.textContent = 'Pincode verified successfully';
                        validationMessage.classList.remove('text-primary', 'text-danger');
                        validationMessage.classList.add('text-success');
                        pincodeInput.classList.add('is-valid');
                    } else {
                        throw new Error('No data found');
                    }
                } catch (error) {
                    console.error('Error fetching town details:', error);
                    validationMessage.textContent = 'Invalid Pincode. Please check and try again.';
                    validationMessage.classList.remove('text-primary', 'text-success');
                    validationMessage.classList.add('text-danger');
                    pincodeInput.classList.add('is-invalid');
                }
            }, 500);

            // Update towns dropdown and location details
            function updateTownsAndLocation(pincodeData) {
                // Populate towns dropdown
                const uniqueTowns = [...new Set(pincodeData.PostOffice.map(po => po.Name))];
                uniqueTowns.forEach(town => {
                    const option = document.createElement('option');
                    option.value = town;
                    option.textContent = town;
                    townsDropdown.appendChild(option);
                });

                // Show towns container
                townsContainer.style.display = 'block';

                // Set state (assuming all post offices in the same pincode are in the same state)
                stateInput.value = pincodeData.PostOffice[0].State;
            }

            // Event listeners
            pincodeInput.addEventListener('blur', fetchPincodeDetails);

            townsDropdown.addEventListener('change', function () {
                const selectedTowns = Array.from(this.selectedOptions).map(option => option.value);
                cityInput.value = selectedTowns.join(', ');
            });
        });
    </script>
    <script>
        const discountedTotalElement = document.querySelector('.fw-bold.text-success');
        const discountedTotal = parseFloat(
            discountedTotalElement.textContent.replace('₹', '').trim() || 0
        );
        const shippingElement = document.getElementById('shipping-cost');

        console.log("discountedTotal=", discountedTotal);

        if (discountedTotal >= 1000) {
            shippingElement.innerText = "₹ 0.00";
        }
    </script>


    <script>
        const paymentOptions = document.querySelectorAll('input[name="paymentOption"]');
        const placeOrderButton = document.getElementById('placeOrderButton');

        paymentOptions.forEach(option => {
            option.addEventListener('change', () => {
                placeOrderButton.style.display = 'block';
            });
        });
    </script>
    <script>
        document.getElementById('applyBtn').addEventListener("click", function () {
            const couponInput = document.getElementById('couponInput').value.trim();
            const totalAmountElement = document.querySelector('.fw-bold.text-success');
            const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', '').trim() || '0');

            console.log('Total Amount:', totalAmount);
            const loadingSpinner = document.getElementById('loadingSpinner');

            if (!couponInput) {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Please enter a coupon code",
                    position: "center",
                    toast: true,
                });
                return;
            }

            loadingSpinner.classList.remove('d-none');

            fetch('/apply-coupon', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    code: couponInput,
                    totalAmount: totalAmount
                }),
            })
                .then((response) => response.json())
                .then((data) => {

                    if (data.success) {
                        const shippingCostElement = document.getElementById('shipping-cost');
                        if (data.shipping === 0) {
                            shippingCostElement.textContent = "Free Shipping";
                        } else {
                            shippingCostElement.textContent = `₹${data.shipping.toFixed(2)}`;
                        }
                        Swal.fire({
                            icon: "success",
                            title: 'Success',
                            text: "Coupon applied successfully",
                            position: "center",
                            toast: true
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: data.message || "Invalid Coupon",
                            position: "center",
                            toast: true,
                        });
                    }
                })
                .catch((error) => {

                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "An error occurred. Please try again",
                        position: "center",
                        toast: true,
                    });
                })
                .finally(() => {
                    loadingSpinner.classList.add('d-none');
                });
        });

        document.getElementById('removeBtn').addEventListener("click", function () {
            const loadingSpinner = document.getElementById('loadingSpinner');


            loadingSpinner.classList.remove('d-none');

            fetch('/remove-coupon', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {

                        Swal.fire({
                            icon: "success",
                            title: 'Success',
                            text: "Coupon removed successfully",
                            position: "center",
                            toast: true
                        }).then(() => {
                            location.reload();
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "An error occurred while removing the coupon",
                        position: "center",
                        toast: true,
                    });
                })
                .finally(() => {
                    loadingSpinner.classList.add('d-none');
                });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Handle address selection
            const selectButtons = document.querySelectorAll('.select-btn');
            selectButtons.forEach(button => {
                button.addEventListener('click', (event) => {
                    event.preventDefault();
                    const addressId = button.getAttribute('data-id');

                    // Disable buttons and show loading state
                    selectButtons.forEach(btn => {
                        btn.disabled = true;
                        btn.classList.add('disabled');
                    });

                    // Show loading indicator for shipping charge with emoji
                    const shippingChargeElement = document.getElementById('shipping-cost');
                    const originalText = shippingChargeElement.innerText;
                    shippingChargeElement.innerHTML = `⏳ Calculating... 🚚`;

                    fetch(`/select-address/?id=${addressId}`, { method: 'GET' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {

                                sessionStorage.setItem('loadingShippingCharge', JSON.stringify({
                                    addressId: addressId,
                                    shippingCharge: data.shippingCharge
                                }));
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000);

                            } else {

                                selectButtons.forEach(btn => {
                                    btn.disabled = false;
                                    btn.classList.remove('disabled');
                                });

                                shippingChargeElement.innerText = originalText;

                                Swal.fire({
                                    title: "Error",
                                    text: data.error || "Failed to select the address. Please try again.",
                                    icon: "error",
                                    toast: true,
                                    position: "center"

                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error selecting address:', error);

                            // Restore buttons and show error
                            selectButtons.forEach(btn => {
                                btn.disabled = false;
                                btn.classList.remove('disabled');
                            });

                            shippingChargeElement.innerText = originalText;

                            Swal.fire({
                                title: "Error",
                                text: "An error occurred while selecting the address. Please try again.",
                                icon: "error",
                                toast: true,
                                position: "center"
                            });
                        });
                });
            });


            const loadingData = sessionStorage.getItem('loadingShippingCharge');
            if (loadingData) {
                const { addressId, shippingCharge } = JSON.parse(loadingData);

                sessionStorage.removeItem('loadingShippingCharge');


                const shippingChargeElement = document.getElementById('shipping-coast');
                shippingChargeElement.innerText = `₹ ${shippingCharge.toFixed(2)}`;


                document.querySelectorAll('.card').forEach(card => {
                    card.classList.remove('border-success');
                });
                const selectedCard = document.querySelector(`#address-${addressId}`);
                if (selectedCard) {
                    selectedCard.classList.add('border-success');
                }
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const paymentMethodForm = document.getElementById('paymentMethodForm');
            const placeOrderButton = document.getElementById('placeOrderButton');
            const paymentRadios = document.querySelectorAll('input[name="paymentOption"]');

            function handlePaymentMethodSelection() {
                placeOrderButton.style.display = 'none';

                paymentRadios.forEach(radio => {
                    radio.addEventListener('change', async () => {
                        const selectedPaymentMethod = document.querySelector('input[name="paymentOption"]:checked');

                        if (selectedPaymentMethod) {
                            try {
                                // Send payment method to server
                                const response = await fetch('/handle-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        paymentOption: selectedPaymentMethod.value
                                    })
                                });

                                const result = await response.json();

                                if (result.success) {
                                    if (selectedPaymentMethod.value === 'COD' || selectedPaymentMethod.value === "WALLET") {

                                        placeOrderButton.textContent = 'Place Order';
                                        placeOrderButton.style.display = 'block';
                                    } else if (selectedPaymentMethod.value === 'ONLINE') {

                                        placeOrderButton.textContent = 'Make Payment';
                                        placeOrderButton.style.display = 'block';
                                    }


                                    Swal.fire({
                                        title: "Payment Method",
                                        text: `${selectedPaymentMethod.value} payment method selected`,
                                        icon: "success",
                                        toast: true,
                                        position: 'center',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                } else {

                                    Swal.fire({
                                        title: "Error",
                                        text: result.error || "Failed to set payment method",
                                        icon: "error",
                                        toast: true,
                                        position: 'center',
                                    });
                                }
                            } catch (error) {
                                console.error("Error sending payment method:", error);
                                Swal.fire({
                                    title: "Error",
                                    text: "An error occurred while setting payment method",
                                    icon: "error",
                                    toast: true,
                                    position: 'center',
                                });
                            }
                        }
                    });
                });


                placeOrderButton.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const selectedPaymentMethod = document.querySelector('input[name="paymentOption"]:checked');

                    if (!selectedPaymentMethod) {
                        Swal.fire({
                            title: "Error",
                            text: "Please select a payment method",
                            icon: "error",
                            position: 'center',
                            toast: true,
                        });
                        return;
                    }

                    const paymentMethod = selectedPaymentMethod.value;

                    if (paymentMethod === 'COD' || paymentMethod === "WALLET") {

                        try {
                            const response = await fetch('/place-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                            });

                            const data = await response.json();
                            if (data.success) {
                                Swal.fire({
                                    title: "Order Placed",
                                    text: "Your order has been placed successfully!",
                                    icon: "success",
                                    position: 'center',
                                    toast: true,
                                }).then(() => {
                                    window.location.href = data.redirectURL;
                                });
                            } else {
                                Swal.fire({
                                    title: "Error",
                                    text: data.error || "An error occurred while placing your order.",
                                    icon: "error",
                                    position: 'center',
                                    toast: true,
                                });
                            }
                        } catch (error) {
                            console.error("Error placing order:", error);
                            Swal.fire({
                                title: "Error",
                                text: "An error occurred. Please try again.",
                                icon: "error",
                                position: 'center',
                                toast: true,
                            });
                        }
                    } else if (paymentMethod === 'ONLINE') {

                        const amount = parseFloat(document.getElementById('total').value);
                        initializeRazorpay(amount, paymentMethod);
                    }
                });
            }


            async function initializeRazorpay(amount, paymentOption) {
                try {
                    const response = await fetch('/create-razorpay-order', {
                        method: "POST",
                        headers: { 'content-type': 'application/json' },
                        body: JSON.stringify({ amount, paymentOption })
                    });
                    const data = await response.json();
                    console.log('Response from server:', data)

                    if (!data.success) {
                        throw new Error(data.error || "Failed to create Razorpay order");
                    }

                    const options = {
                        key: data.key,
                        amount: data.amount,
                        currency: data.currency,
                        name: "Henza's Dry Store",
                        description: 'Payment For Order',
                        order_id: data.order_id,
                        handler: async function (response) {
                            console.log('response from razorpay:', response);
                            try {

                                const verifyResponse = await fetch('/verify-payment', {
                                    method: "POST",
                                    headers: { 'content-type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature

                                    })
                                });
                                const verifyResult = await verifyResponse.json();
                                if (verifyResult.success) {

                                    Swal.fire({
                                        title: "Payment Success",
                                        text: "Your payment has been processed successfully.",
                                        icon: "success",
                                        position: 'center',
                                        toast: true,
                                    }).then(() => {
                                        window.location.href = verifyResult.redirectURL;
                                    })
                                } else {
                                    throw new Error("Payment verification Failed");
                                }
                            } catch (error) {
                                Swal.fire({
                                    title: "Payment Failed",
                                    text: "Payment verification Failed. Please try again",
                                    icon: "error",
                                    position: 'center',
                                    toast: true,
                                })
                            }
                        },
                        prefill: {
                            name: data.prefill.name,
                            email: data.prefill.email,
                            contact: data.prefill.contact,
                        },
                        theme: {
                            color: "#3399cc"
                        },
                        modal: {
                            ondismiss: async function () {
                                try {
                                    // First, verify if payment was attempted
                                    const verifyResponse = await fetch('/verify-payment', {
                                        method: "POST",
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({})
                                    });
                                    const verifyResult = await verifyResponse.json();

                                    // If payment verification fails, show retry modal
                                    if (!verifyResult.success) {
                                        const paymentModal = new bootstrap.Modal(document.getElementById('paymentRetryModal'));
                                        paymentModal.show();

                                        // Add event listener for modal close to call failed-order-save
                                        const paymentRetryModal = document.getElementById('paymentRetryModal');
                                        paymentRetryModal.addEventListener('hidden.bs.modal', async () => {
                                            try {
                                                // Call failed-order-save controller
                                                const failedOrderResponse = await fetch('/failed-order-save', {
                                                    method: "POST",
                                                    headers: { 'Content-Type': 'application/json' },
                                                    body: JSON.stringify({
                                                        amount: amount,
                                                        paymentOption: paymentOption
                                                    })
                                                });
                                                const failedOrderResult = await failedOrderResponse.json();

                                                if (!failedOrderResult.success) {
                                                    console.error('Failed to save order:', failedOrderResult.error);
                                                    Swal.fire({
                                                        title: "Error",
                                                        text: "Unable to process your order. Please contact support.",
                                                        icon: "error",
                                                        position: 'center',
                                                        toast: true,
                                                    });
                                                } else {

                                                    window.location.href = failedOrderResult.redirectURL;
                                                }
                                            } catch (error) {
                                                console.error('Error saving failed order:', error);
                                                Swal.fire({
                                                    title: "Error",
                                                    text: "An error occurred. Please contact support.",
                                                    icon: "error",
                                                    position: 'center',
                                                    toast: true,
                                                });
                                            }
                                        });

                                        // Setup retry payment button
                                        const retryButton = document.getElementById('retryPaymentBtn');
                                        retryButton.replaceWith(retryButton.cloneNode(true)); // Remove old listeners
                                        document.getElementById('retryPaymentBtn').addEventListener('click', () => {
                                            const selectedOption = document.querySelector('input[name="paymentOption"]:checked');
                                            if (selectedOption) {
                                                const paymentOption = selectedOption.value;
                                                initializeRazorpay(amount, paymentOption);
                                            } else {
                                                Swal.fire({
                                                    title: "Error",
                                                    text: "Please select a payment option.",
                                                    icon: "warning",
                                                    position: 'center',
                                                    toast: true,
                                                });
                                            }
                                        });
                                    }
                                } catch (error) {
                                    console.error('Error handling payment closure:', error);
                                    Swal.fire({
                                        title: "Error",
                                        text: "An error occurred. Please contact support.",
                                        icon: "error",
                                        position: 'center',
                                        toast: true,
                                    });
                                }
                            }
                        }
                    }
                    const razorpayInstance = new Razorpay(options);
                    razorpayInstance.open();
                } catch (error) {
                    console.error('Razorpay initialization Error', error);
                    Swal.fire({
                        title: "Error",
                        text: error.message || "Failed to initialize payment. Please try again",
                        position: 'center',
                        toast: true,
                        icon: "error"
                    });
                }
            }

            // Initialize payment method selection handling
            handlePaymentMethodSelection();
        });
    </script>


    <script>
        document.addEventListener("DOMContentLoaded", function () {

            document
                .getElementById("addressForm")
                .addEventListener("submit", function (event) {
                    if (!validateForm()) {
                        event.preventDefault();
                    }
                });

            function validateForm() {
                const fields = [
                    { id: "addressType", required: true, pattern: null, error: "This field is required." },
                    { id: "name", required: true, pattern: /^[A-Za-z\s]+$/, error: "Name should contain alphabets only." },
                    { id: "city", required: true, pattern: /^[A-Za-z\s]+$/, error: "City should contain alphabets only." },
                    { id: "landmark", required: false, pattern: /^[A-Za-z\s]+$/, error: "Landmark should contain alphabets only." },
                    { id: "state", required: true, pattern: /^[A-Za-z\s]+$/, error: "State should contain alphabets only." },
                    { id: "pincode", required: true, pattern: /^\d{6}$/, error: "Pincode should be a 6-digit number." },
                    { id: "phone", required: true, pattern: /^\d{10}$/, error: "Phone number should be a 10-digit number." },
                    { id: "altPhone", required: false, pattern: /^\d{10}$/, error: "Alternate phone number should be a 10-digit number." },
                ];

                let isValid = true;

                fields.forEach(({ id, required, pattern, error }) => {
                    const input = document.getElementById(id);
                    const inputValue = input?.value.trim();
                    const errorElement = document.getElementById(`${id}-error`);


                    if (required && !inputValue) {
                        showError(input, errorElement, "This field is required.");
                        isValid = false;
                    }

                    else if (pattern && inputValue && !pattern.test(inputValue)) {
                        showError(input, errorElement, error);
                        isValid = false;
                    }

                    else {
                        clearError(input, errorElement);
                    }
                });

                const phone = document.getElementById("phone")?.value.trim();
                const altPhone = document.getElementById("altPhone")?.value.trim();

                if (phone && altPhone && phone === altPhone) {
                    Swal.fire({
                        title: "Error",
                        text: "Phone number and alternate phone number should be different.",
                        icon: "error",
                        position: 'center',
                        toast: true,
                    });
                    isValid = false;
                }
                return isValid;
            }

            function showError(input, errorElement, message) {
                if (!errorElement) {
                    const errorDiv = document.createElement("div");
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = message;
                    errorDiv.id = `${input.id}-error`;
                    input.parentNode.appendChild(errorDiv);
                }
            }

            function clearError(input, errorElement) {
                if (errorElement) {
                    errorElement.remove();
                }
            }

        });

    </script>

    <script>
        document.getElementById('pincode').addEventListener('blur', function () {
            const pincode = this.value.trim();
            const townsDropdown = document.getElementById('towns');
            const cityInput = document.getElementById('city');

            if (pincode.length === 6) {
                fetch(`https://api.postalpincode.in/pincode/${pincode}`)
                    .then(response => response.json())
                    .then(data => {
                        townsDropdown.innerHTML = ''; // Clear previous options
                        cityInput.value = ''; // Clear city input
                        if (data[0].Status === "Success") {
                            data[0].PostOffice.forEach(postOffice => {
                                const option = document.createElement('option');
                                option.value = postOffice.Name;
                                option.textContent = postOffice.Name;
                                townsDropdown.appendChild(option);
                            });
                        } else {
                            alert('Invalid Pincode or no towns available');
                        }
                    })
                    .catch(error => console.error('Error fetching town details:', error));
            } else {
                alert('Please enter a valid 6-digit pincode.');
            }
        });

        // When a town is selected, set it as the city
        document.getElementById('towns').addEventListener('change', function () {
            const selectedTowns = Array.from(this.selectedOptions).map(option => option.value);
            document.getElementById('city').value = selectedTowns.join(', ');
        });
    </script>

    <%- include('../partials/user/footer.ejs') %>